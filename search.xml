<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTML5语义化标签笔记</title>
      <link href="/2019/01/18/HTML5%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/01/18/HTML5%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>HTML5语义化标签笔记</p><a id="more"></a><h3 id="为什么会有h5-语义化标签"><a href="#为什么会有h5-语义化标签" class="headerlink" title="为什么会有h5 语义化标签"></a>为什么会有h5 语义化标签</h3><p>在HTML5出现之前，我们一般采用DIV+CSS布局页面。但是这样的布局方式不仅使我们的文档结构不够清晰，而且不利于搜索引擎爬虫对我们页面的爬取。为了解决上述缺点，HTML5新增了很多新的语义化标签。</p><h3 id="语义标签的概念"><a href="#语义标签的概念" class="headerlink" title="语义标签的概念"></a>语义标签的概念</h3><p><strong>维基百科</strong></p><p><code>语义化</code>是前端开发里面的一个专用术语，其优点在于标签语义化有助于构架良好的<a href="https://zh.wikipedia.org/wiki/Html" target="_blank" rel="noopener">html</a>结构，有利于<a href="https://zh.wikipedia.org/wiki/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E" target="_blank" rel="noopener">搜索引擎</a>的建立索引、抓取；另外，亦有利于页面在不同的设备上显示尽可能相同；此外，亦有利于构建清晰的机构，有利于团队的开发、维护。</p><p>通俗来说：语义化的意思是从名称一眼就能看出其内容和作用是什么，语义化标签就是通过使用浅显易懂的元素名和属性名来实现语义化的</p><h3 id="语义标签有什么用？"><a href="#语义标签有什么用？" class="headerlink" title="语义标签有什么用？"></a>语义标签有什么用？</h3><ul><li>可以提高页面的可访问性，即在css丢失的情况下，页面结构仍然可以比较清晰的展现；</li><li>提高用户体验，用户不够清楚地方可以得到良好的解释；</li><li>有利于页面seo，让搜索引擎更容易明白页面结构和内容的主次顺序；</li><li>有利于页面维护者理解代码结构，降低维护成本；</li><li>方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以语义的方式来渲染网页</li></ul><h3 id="常用语义标签有哪些？"><a href="#常用语义标签有哪些？" class="headerlink" title="常用语义标签有哪些？"></a>常用语义标签有哪些？</h3><p><strong>h1到h6标签 表示不同等级的标题</strong></p><ul><li>可以用来表现文本内容的层级结构</li></ul><p><strong><code>&lt;article&gt;</code> 元素表示文档、页面、应用或网站中的独立结构，其意在成为可独立分配的或可复用的结构</strong></p><ul><li><code>&lt;article&gt;</code> 可以嵌套使用，但是他们必须是部分与整体的关系</li><li><code>&lt;article&gt;</code> 元素的作者信息可通过 <code>&lt;address&gt;</code> 元素提供，但是不适用于嵌套的 <code>&lt;article&gt;</code> 元素</li><li><code>&lt;article&gt;</code> 元素的发布日期和时间可通过 <code>&lt;time&gt;</code> 元素的pubdate属性表示</li></ul><p><strong><aside>定义侧栏标签</aside></strong></p><ul><li>如果使用多个 <code>&lt;aside&gt;</code>，标签应该在主要内容的后面，这样有利于SEO的搜索与提升可访问性</li><li>如果是与文章的主要内容有关系的图像需要用 <code>&lt;figure&gt;</code> 标签代替</li></ul><p><strong><code>&lt;section&gt;</code> 元素表示文档中的一个区域（或节），比如，内容中的一个专题组，一般来说会有包含一个标题（heading）</strong></p><ul><li>如果元素内容可以分为几个部分的话，应该使用 <code>&lt;article&gt;</code> 而不是 <code>&lt;section&gt;</code></li><li>不要把 <code>&lt;section&gt;</code> 元素作为一个普通的容器来使用。 一般来说，一个 <code>&lt;section&gt;</code> 应该出现在文档大纲中</li></ul><p><strong><code>&lt;header&gt;</code> 元素用来表示一些前言性质或导航类的内容。它可以包含一些标题性质元素，也可以放置一些比如logo，搜索框，或其它的 <code>&lt;header&gt;</code> 元素等</strong></p><ul><li><code>&lt;header&gt;</code> 元素并不是一个可以形成段落内容的元素，所以，不需要在内容目录里体现出来</li></ul><p><strong><code>&lt;footer&gt;</code> 元素表示最近一个章节内容或者根节点（sectioning root）元素的页脚。一个页脚通常包含该章节作者、版权数据或者与文档相关的链接等信息</strong></p><ul><li><code>&lt;footer&gt;</code> 元素内的作者信息应包含在 <code>&lt;address&gt;</code> 元素中</li><li><code>&lt;footer&gt;</code> 元素不是章节内容，因此在outline中不能包含新的章节</li></ul><p><strong><code>&lt;nav&gt;</code> 描绘一个含有多个超链接的区域，这个区域包含转到其他页面，或者页面内部其他部分的链接列表</strong></p><ul><li>并不是所有的链接都必须使用 <code>&lt;nav&gt;</code> 元素,它只用来将一些热门的链接放入导航栏</li><li>一个网页也可能含有多个 <code>&lt;nav&gt;</code> 元素,例如一个是网站内的导航列表,另一个是本页面内的导航列表</li><li>对于屏幕阅读障碍的人,可以使用这个元素来确定是否忽略初始内容</li></ul><p><strong><code>&lt;dl&gt;,&lt;dt&gt;,&lt;dd&gt;</code> (自定义列表)</strong></p><ul><li>dl: 英文意思为definition list，作用是定义列表</li><li>dt: 英文意思为defines terms，作用是定义列表中的项目</li><li>dd: 英文意思为defines description，作用是定义列表中项目的注释</li></ul><p><strong><code>&lt;b&gt;/&lt;strong&gt;</code> 元素默认均展示为加粗</strong></p><ul><li><code>&lt;b&gt;</code> 表示“文体突出”文字，通俗讲就是突出不安分的文字。像概要中的关键字，产品名。或者代表强调的排版方式</li><li><code>&lt;strong&gt;</code> 表示重程度的强调</li></ul><p><strong><code>&lt;i&gt;/&lt;em&gt;</code> 元素默认均展示为斜体</strong></p><ul><li><code>&lt;i&gt;</code> 表现为在文章中突出不同意见或语气或的一段文本,例如外语，科技术语、或者是排版用的斜体文字</li><li><code>&lt;em&gt;</code> 表示强调</li></ul><p><strong><code>&lt;mark&gt;</code>用来突出显示文本，他的效果就像是用荧光笔给重点的语句做标一样</strong></p><p><strong><code>&lt;address&gt;</code> 元素可以让作者为它最近的 <code>&lt;article&gt;</code> 或者 <code>&lt;body&gt;</code> 祖先元素提供联系信息。在后一种情况下，它应用于整个文档</strong></p><ul><li>当表示一个和联系信息无关的任意的地址时，应使用 <code>&lt;p&gt;</code> 元素</li><li>这个元素不能包含除了联系信息之外的任何信息，比如出版日期</li><li>通常，<code>&lt;address&gt;</code> 元素可以放在当前section的 <code>&lt;footer&gt;</code> 元素中，如果存在的话</li></ul><p><strong><code>&lt;figure&gt;</code> 这个元素是用来引入图表、图形、照片等，对应的场景就是像是杂志中的图片一样</strong></p><ul><li><code>&lt;figure&gt;</code> 元素可以包含多个内容块，但是只能有一个 <code>&lt;figcaption&gt;</code>（可以理解成给图表加标题）标签</li><li>可以用 <code>&lt;h1&gt; ~ &lt;h6&gt;</code> 来给 <code>&lt;figure&gt;</code> 增加标题；</li><li><code>&lt;figcaption&gt;</code> 不能单独出现，需要有配套的内容一起出现</li></ul><p><strong><code>&lt;time&gt;</code> 可以通过这个标签标记一个具体的时间或日期，应用场景通常就是一篇文章的发表时间</strong></p><ul><li>datetime中的时间最好与 <code>&lt;time&gt;</code> 标签中的文本元素日期一样，写法可以不一样</li><li>如果这个时间是代表整个文章或是页面的时间需要添加pubdate属性</li><li>不要在 <code>&lt;time&gt;</code> 标签中使用不确切的时间如：“今天中午”、“上周末”</li><li>如果 使用pubdate属性需要注意的是要在同一个父标签下面不要出现张冠李戴的问题</li><li><code>&lt;time&gt;</code> 标签不能在嵌套另一个 <code>&lt;time&gt;</code> 标签</li><li>datatime中的时间格式需要是标准的机器可能的时间 如:YYYY-MM-DDThh:mm:ss</li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>尽可能少的使用无语义的标签div和span</li><li>在语义不明显时，既可以使用div或者p时，尽量用p，因为p在默认情况下有上下间距，对兼容特殊终端有利</li><li>使用表格时，标题要用caption，表头用thead，主体部分用tbody包围，尾部用tfoot包围。表头和一般单元格要区分开，表头用th，单元格用td</li><li>表单域要用fieldset标签包起来，并用legend标签说明表单的用途</li><li>每个input标签对应的说明文本都需要使用label标签，并且通过为input设置id属性，在lable标签中设置for=someld来让说明文本和相对应的input关联起来</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> h5 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18年总结</title>
      <link href="/2018/12/31/18%E5%B9%B4%E6%80%BB%E7%BB%93/"/>
      <url>/2018/12/31/18%E5%B9%B4%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>18年总结</p><a id="more"></a><h3 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h3><ul><li>明天就是新的一年，18年发生了很多的事情与改变，就像今天的这份个人总结（原本是不会写总结的）</li><li>之前每到年底时候是有想过一整年发生的事情，并且计划着新一年要干成的大事，但那些都只是在脑海中想着一幅幅场景，计划着要干的一件件事情， 怀着得过且过的心态这么过这每一年</li><li>如果说16，17年是迷茫的，那么18年就是焦虑，开始慢慢懂得了一些事情，知道了自己的无知</li></ul><h3 id="值得记录的事情"><a href="#值得记录的事情" class="headerlink" title="值得记录的事情"></a>值得记录的事情</h3><!-- - 来到上海，说实在的，一个地地道道北方人，抛开天气地理因素，光是饮食习惯就没有想过来上海这个所谓魔都，在没有毕业的时候，留在湖南一家互联网公司，因为某一些原因，在今年4月份的时候选择辞职，在老家和附近的城市找了找公司，和大部分人找工作的遭遇是一样的，在一次次的打击和自我价值的否定下，真就觉得自己什么都干不成，一度颓废丧到极点，这个时候，大学好基友好兄弟，小a和小b同我讲，不要丧，来苏州和上海，都有你一个家，大城市有大城市的好，小城市有小城市的安逸，年轻人要想以后吹牛逼，现在就得苦下来，这样，我就开始了南下上海的旅程 --><ul><li>戒烟，是的，2018年随着国庆的结束，伴随我5年半的烟瘾就已经结束，说起这个戒烟的经历，确实蛮好笑的（现在想想佩服自己），在今天8月9月的时候，抽烟确实有点太狠，我说一个数吧，白天一盒，晚上一盒，要是有打游戏，另加一盒，那段时间咳嗽的厉害，之后偶然间，发现电子烟东西，老实说，就是抱着试一试的态度买了，抽了两个星期，国庆最后一天假期，大家知道，电子烟需要充电，但因为已经上床懒得下去，第二天上班就没带，一天下来竟然发现我好像也没有之前几个小时不抽烟的那种难受感，所以就想着慢慢强迫自己结束掉这个坏习惯</li></ul><h3 id="感觉失败的事情"><a href="#感觉失败的事情" class="headerlink" title="感觉失败的事情"></a>感觉失败的事情</h3><ul><li>英语单词从开始到放弃 （4级词汇第一个词，abandon[放弃]）哈哈哈</li><li>跑步没有坚持（有着各种各样的原因没有坚持下来）</li><li>学习深度不够（知识点觉得会用就行）</li></ul><h3 id="自已一年前立的flag"><a href="#自已一年前立的flag" class="headerlink" title="自已一年前立的flag"></a>自已一年前立的flag</h3><ul><li>去年没有</li></ul><h3 id="得到的教训"><a href="#得到的教训" class="headerlink" title="得到的教训"></a>得到的教训</h3><ul><li>跳出程序员思维，重视沟通，因为自己原因，导致自己在工作频频出错，看着很努力，其实白做无用功（学习：如何进行有效高效的沟通）</li><li>换角度思维，看事情太过单一，太过局限</li></ul><h3 id="读了几本书"><a href="#读了几本书" class="headerlink" title="读了几本书"></a>读了几本书</h3><ul><li>《追风筝的人》</li><li>《无妄之灾》</li><li>《被偷走的人生》</li></ul><h3 id="对自己重大影响的人和事"><a href="#对自己重大影响的人和事" class="headerlink" title="对自己重大影响的人和事"></a>对自己重大影响的人和事</h3><ul><li>今年能够有这些想法和改变，都是因为那个人，他就是”stormzhang”，人称帅帐（张鸽），至于介绍，我就不多说了，可以上网查资料，或者关微信公众号（stormzhang）</li></ul><h3 id="19年计划"><a href="#19年计划" class="headerlink" title="19年计划"></a>19年计划</h3><ul><li><input disabled type="checkbox"> 读书计划，2019年12本书，完成一本奖励自己一顿大餐，全部完成，奖励自己一台ipad</li><li><input disabled type="checkbox"> 学习英语，短期目标，一天5个单词，年终目标能够完成英文技术文档的简单阅读，奖励自己（bose无线耳机）</li><li><input disabled type="checkbox"> 博客更新，每两周时间更新学习完成任务进度</li><li><input disabled type="checkbox"> 脱单 </li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>以上则是18年回顾以及19年计划，19年会是一个新的开始。</li><li>请继续坚持：正确的努力，不断前行！</li><li>2019！就是干！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次svn修改端口出现的问题</title>
      <link href="/2018/10/30/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1svn%E4%BF%AE%E6%94%B9%E7%AB%AF%E5%8F%A3%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2018/10/30/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1svn%E4%BF%AE%E6%94%B9%E7%AB%AF%E5%8F%A3%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>记录一次svn修改端口出现的问题</p><a id="more"></a><p>使用svn进行代码管理，在windows服务器上面svn服务占用的是443端口，在网站升级https之后，443端口解放出来交给https了，这个时候就需更换端口，默认的端口有443和8443，我们可一切换到8443，结果在本地check代码的时候，端口也输入了，但就是check不了，提示原因也是含糊不清</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>1.服务器端口为打开</li><li>2.服务根本没有运行</li></ul><p>这里我们排除第二点，在修改端口之后只需重启svn服务就可以了</p><ul><li>主要看一下服务器端口是什么原因：<br>需要你打开服务器的端口号，在服务器上找到控制面板-&gt;防火墙-&gt;高级设置-&gt;把入站8443添加进去。</li><li>紧接着还没完，去服务器代理商，云服务器-&gt;安全组配置-&gt;配置规则-&gt;添加安全组规则添加进去8443入口</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> svn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git学习笔记</title>
      <link href="/2018/10/21/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/10/21/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>git学习笔记</p><a id="more"></a><blockquote><p>从svn转到git版本控制之后，就爱上了它，再配合上github，简直不要太爽,以下是结合多方查询之后，总结出来适用于自己的git笔记！</p></blockquote><hr><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="配置账号信息"><a href="#配置账号信息" class="headerlink" title="配置账号信息"></a>配置账号信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git config -e [--global]  #编辑Git配置文件</span><br><span class="line"></span><br><span class="line">git config --global user.name itxcc</span><br><span class="line">git config --global user.email itxcc420@gmail.com</span><br><span class="line"></span><br><span class="line">git config --list #查看配置的信息</span><br><span class="line"></span><br><span class="line">git help config #获取帮助信息</span><br></pre></td></tr></table></figure><h4 id="配置密钥"><a href="#配置密钥" class="headerlink" title="配置密钥"></a>配置密钥</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C itxccc420@gmail.com #生成密钥</span><br><span class="line"></span><br><span class="line">ssh -T git@github.com #测试是否成功</span><br></pre></td></tr></table></figure><h4 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.st status #git st</span><br><span class="line">git config --global alias.co checkout #git co</span><br><span class="line">git config --global alias.br branch #git br</span><br><span class="line">git config --global alias.ci commit #git ci</span><br></pre></td></tr></table></figure><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">git init #初始化</span><br><span class="line"></span><br><span class="line">git status #文件状态</span><br><span class="line"></span><br><span class="line">git add [file1] [file2] ... #.或*代表全部添加</span><br><span class="line"></span><br><span class="line">git commit -m &quot;msessage&quot; </span><br><span class="line">备注：</span><br><span class="line">-  type（文件）：‘备注’</span><br><span class="line">- - feat:新功能</span><br><span class="line">- - fix:修复bug</span><br><span class="line">- - style：格式</span><br><span class="line">- - refactor：代码重构</span><br><span class="line">- - chore：项目构建</span><br><span class="line"></span><br><span class="line">git push origin 分支名称  #推送到某个分支</span><br><span class="line"></span><br><span class="line">git log #查看所有提交记录</span><br><span class="line">git reflog #不小心删除了东西，先查到commit id，恢复</span><br><span class="line"></span><br><span class="line">git branch #显示所有本地分支</span><br><span class="line">git branch test #新建test分支</span><br><span class="line">git push git test #推送test分支到远程</span><br><span class="line">git checout test #切换到test分支</span><br><span class="line">git merge test #将test分支合并到当前分支</span><br><span class="line">git branch -d test #删除test分支</span><br><span class="line">git push origin -d test #删除远程test分支</span><br><span class="line"></span><br><span class="line">git rebase master#将master分之上超前的提交，变基到当前分支</span><br><span class="line">git rebase --onto master 169a6 #限制回滚范围，rebase当前分支从169a6以后的提交</span><br><span class="line">git rebase --interactive #交互模式</span><br><span class="line">git rebase --continue# 处理完冲突继续合并</span><br><span class="line">git rebase --skip# 跳过</span><br><span class="line">git rebase --abort# 取消合并</span><br><span class="line"></span><br><span class="line">git tag #列出现有标签</span><br><span class="line"></span><br><span class="line">git tag v0.1 [branch|commit] # [从指定位置]新建标签</span><br><span class="line">git tag -a v0.1 -m &apos;my version 1.4&apos;#新建带注释标签</span><br><span class="line"></span><br><span class="line">git checkout tagname#切换到标签</span><br><span class="line"></span><br><span class="line">git push origin v1.5#推送分支到源上</span><br><span class="line">git push origin --tags#一次性推送所有分支</span><br><span class="line"></span><br><span class="line">git tag -d v0.1#删除标签</span><br><span class="line">git push origin :refs/tags/v0.1#删除远程标签</span><br></pre></td></tr></table></figure><h3 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h3><ul><li>一般而言，会有两个公共分支<br>&nbsp;&nbsp;&nbsp;&nbsp;master （项目主分支）<br>&nbsp;&nbsp;&nbsp;&nbsp;dev （测试分支）</li><li>开发一般是需要在自己的分支进行开发，然后推送到远端，本地则需要git merge 本地分支来进行更新dev分支，如果是多人开发，则需要git pull来更新dev分支</li><li>在开发需要下拉代码时，远程仓库和本地刚好又有改动，最好先将自己在本地的代码进行 git stash （暂存区），再去进行下拉，在运行git stash pop 把自己的代码释放出来</li><li>添加tag<br>  &nbsp;&nbsp;&nbsp;&nbsp;git tag -a v0.0.0 -m ‘v0.0.0’<br>  &nbsp;&nbsp;&nbsp;&nbsp;git push – tag</li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chrome浏览器下video隐藏下载按钮</title>
      <link href="/2018/10/11/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8Bvideo%E9%9A%90%E8%97%8F%E4%B8%8B%E8%BD%BD%E6%8C%89%E9%92%AE/"/>
      <url>/2018/10/11/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8Bvideo%E9%9A%90%E8%97%8F%E4%B8%8B%E8%BD%BD%E6%8C%89%E9%92%AE/</url>
      
        <content type="html"><![CDATA[<p>chrome浏览器下video隐藏下载按钮</p> <a id="more"></a><blockquote><p>用原生video标签显示一个视频，不希望有下载按钮，找到一个可以看上去没有下载功能的方法，做一下笔记。</p></blockquote><h3 id="使用-video-元素的-ControlList-API"><a href="#使用-video-元素的-ControlList-API" class="headerlink" title="使用 video 元素的 ControlList API"></a>使用 video 元素的 ControlList API</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;video controls controlsList=&quot;nodownload&quot;&gt;&lt;/video&gt;</span><br></pre></td></tr></table></figure><p>通过 ControList API，不仅可以通过设置 nodownload 来隐藏下载按钮，还可以设置 nofullscreen 隐藏全屏按钮, 以及noremoteplayback 等属性，具体的示例可以参考 github pages。该方案的优点是原生支持，不会产生bug，而且设置起来也是简单方便，不过由于 ControlList API 是从 Chrome 58+ 才开始引入的，所以对于低于 58 版本的 Chrome 只能通过方法2来隐藏了。</p><h3 id="通过-CSS-隐藏"><a href="#通过-CSS-隐藏" class="headerlink" title="通过 CSS 隐藏"></a>通过 CSS 隐藏</h3><p>通过 Settings|Preferences -&gt; Elements -&gt; Show user agent shadow DOM 打开 shadow DOM 开关后，可以通过 devtools 查看 video 元素的组成部分。<br>由此发现下载按钮的是通过 <input type="button" pseudo="-internal-media-controls-download-button" style> 呈现的，所以可以通过下述CSS将其隐藏：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">video::-internal-media-controls-download-button &#123;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是很可惜，该方法并不起作用，猜想可能是Chrome的一个BUG，所以只能另辟蹊径，简单来说就是将下载按钮挤出可见范围，这样就可以变相的认为按钮被隐藏了，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">video::-webkit-media-controls &#123;</span><br><span class="line">    overflow: hidden !important;</span><br><span class="line">&#125;video::-webkit-media-controls-enclosure &#123;</span><br><span class="line">    width: calc(100% + 32px);</span><br><span class="line">    margin-left: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图库网站</title>
      <link href="/2018/09/23/%E5%9B%BE%E5%BA%93%E7%BD%91%E7%AB%99/"/>
      <url>/2018/09/23/%E5%9B%BE%E5%BA%93%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<p>图库网站</p> <a id="more"></a><h1 id="矢量素材"><a href="#矢量素材" class="headerlink" title="矢量素材"></a>矢量素材</h1><h2 id="Streamline-Emoji"><a href="#Streamline-Emoji" class="headerlink" title="Streamline Emoji"></a>Streamline Emoji</h2><p><a href="http://emoji.streamlineicons.com" target="_blank" rel="noopener">http://emoji.streamlineicons.com</a></p><p>Streamline Emoji 是一个拥有 780+免费矢量表情符号的网站，表情形象非常生动、可爱，情感表述值得学习。</p><h2 id="Undraw"><a href="#Undraw" class="headerlink" title="Undraw"></a>Undraw</h2><p><a href="https://undraw.co" target="_blank" rel="noopener">https://undraw.co</a></p><p>unDraw 是一个很棒的扁平化设计图库，以收录插图为主，这些图案设计很有质感，原作者 Katerina Limpitsouni 仍持续不断更新中，任何人都能从这里找到美丽的插图，免费下载 SVG 或 PNG 格式，无需标示出处，也能用于商业用途。</p><h2 id="Free-Vector"><a href="#Free-Vector" class="headerlink" title="Free Vector"></a>Free Vector</h2><p><a href="https://www.freevector.com" target="_blank" rel="noopener">https://www.freevector.com</a></p><p>网站提供超过 16000 个免费矢量素材，并且每周都有更新，同时网站底部提供非常详细的标签类别分类，能够让你更加方便查找想要的素材。</p><h2 id="Vecteezy"><a href="#Vecteezy" class="headerlink" title="Vecteezy"></a>Vecteezy</h2><p>网址： <a href="https://www.vecteezy.com" target="_blank" rel="noopener">https://www.vecteezy.com</a></p><p>Vecteezy 是一个免费矢量图网站，收集了很多不错的图片素材，更棒的是这个网站天天更新，你可以无时无刻回来挖宝。Vecteezy 提供的文档多为 EPS、AI 与 CDR 格式，也是目前最多使用的矢量图类型。</p><h2 id="Vector-4-Free"><a href="#Vector-4-Free" class="headerlink" title="Vector 4 Free"></a>Vector 4 Free</h2><p>网址： <a href="http://vector4free.com" target="_blank" rel="noopener">http://vector4free.com</a></p><p>Vector4Free 是一个专门提供优质免费矢量素材的网站，文档格式有 AI、EPS、PDF、SVG、CDR 等，网站内容更新速度快、分类全，方便快速查找想要的素材，另外网站上所有的矢量素材都可以免费提供给个人使用，商业时最好检查授权说明。</p><h1 id="图片素材"><a href="#图片素材" class="headerlink" title="图片素材"></a>图片素材</h1><h2 id="Negative-Space"><a href="#Negative-Space" class="headerlink" title="Negative Space"></a>Negative Space</h2><p>网址： <a href="https://negativespace.co/" target="_blank" rel="noopener">https://negativespace.co/</a></p><p>NegativeSpace 是一个众所周知的分享摄影作品的图片网站，有大量高分辨率图片供个人或商业使用，照片除按热门标签分类外，还可按颜色分类查找。</p><h2 id="StockSnap"><a href="#StockSnap" class="headerlink" title="StockSnap"></a>StockSnap</h2><p>网址： <a href="https://stocksnap.io" target="_blank" rel="noopener">https://stocksnap.io</a></p><p>一个图片丰富的资料库，每天都有摄影师上传新的相片到网站，素材更新速度快、图片分辨率高，并且没有版权限制。此外，网站还提供新增日期、趋势、查看次数、下载次数等方式来排序网站内的图片，方便用户浏览下载。</p><h2 id="Pexels"><a href="#Pexels" class="headerlink" title="Pexels"></a>Pexels</h2><p>网址： <a href="https://www.pexels.com" target="_blank" rel="noopener">https://www.pexels.com</a></p><p>免费高品质图片下载网站，提供海量共享图片素材，每周都会定量更新，所有的图片都会显示详细的信息，例如拍摄的相机型号、光圈、焦距、ISO、图片大分辨率等，高清大图质量很不错。</p><h2 id="Burst"><a href="#Burst" class="headerlink" title="Burst"></a>Burst</h2><p>网址： <a href="https://burst.shopify.com" target="_blank" rel="noopener">https://burst.shopify.com</a></p><p>为个人及商业用途提供免费图片的网站，浏览照片集或发现“本周最佳免费照片”，可以满足不同的主题和目的。</p><h2 id="Pixabay"><a href="#Pixabay" class="headerlink" title="Pixabay"></a>Pixabay</h2><p>网址： <a href="https://pixabay.com" target="_blank" rel="noopener">https://pixabay.com</a></p><p>Pixabay 是一个有超过三十万张免费相片、矢量图与艺术插图素材的网站，图片均可用于商业用途。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>九种浏览器的缓存</title>
      <link href="/2018/09/19/%E4%B9%9D%E7%A7%8D%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98/"/>
      <url>/2018/09/19/%E4%B9%9D%E7%A7%8D%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>九种浏览器的缓存</p> <a id="more"></a><blockquote><p>文章转载自 <a href="http://jixianqianduan.com/frontend-javascript/2015/12/28/nine-browser-cache-methods.html" target="_blank" rel="noopener">http://jixianqianduan.com/frontend-javascript/2015/12/28/nine-browser-cache-methods.html</a></p></blockquote><blockquote><p>浏览器缓存（Browser Caching）是浏览器端保存数据用于快速读取或避免重复资源请求的优化机制，有效的缓存使用可以避免重复的网络请求和浏览器快速地读取本地数据，整体上加速网页展示给用户。浏览器端缓存的机制种类较多，总体归纳为九种，这里详细分析下这九种缓存机制的原理和使用场景。打开浏览器的调试模式-&gt;resources左侧就有浏览器的8种缓存机制。</p></blockquote><h2 id="http缓存"><a href="#http缓存" class="headerlink" title="http缓存"></a>http缓存</h2><p>http缓存是基于HTTP协议的浏览器文件级缓存机制。即针对文件的重复请求情况下，浏览器可以根据协议头判断从服务器端请求文件还是从本地读取文件，chrome控制台下的Frames即展示的是浏览器的http文件级缓存。以下是浏览器缓存的整个机制流程。主要是针对重复的http请求，在有缓存的情况下判断过程主要分3步：</p><ul><li>判断expires，如果未过期，直接读取http缓存文件，不发http请求，否则进入下一步</li><li>判断是否含有etag，有则带上if-none-match发送请求，未修改返回304，修改返回200，否则进入下一步</li><li>判断是否含有last-modified，有则带上if-modified-since发送请求，无效返回200，有效返回304，否则直接向服务器请求</li></ul><p>如果通过etag和last-modified判断，即使返回304有至少有一次http请求，只不过返回的是304的返回内容，而不是文件内容。所以合理设计实现expires参数可以减少较多的浏览器请求。</p><h2 id="websql"><a href="#websql" class="headerlink" title="websql"></a>websql</h2><p>websql这种方式只有较新的chrome浏览器支持，并以一个独立规范形式出现，主要有以下特点</p><ul><li>Web Sql 数据库API 实际上不是HTML5规范的组成部分；</li><li>在HTML5之前就已经存在了，是单独的规范；</li><li>它是将数据以数据库的形式存储在客户端，根据需求去读取；</li><li>跟Storage的区别是： Storage和Cookie都是以键值对的形式存在的；</li><li>Web Sql 更方便于检索，允许sql语句查询；</li><li>让浏览器实现小型数据库存储功能；</li><li>这个数据库是集成在浏览器里面的，目前主流浏览器基本都已支持；</li></ul><p>websql API主要包含三个核心方法：</p><ul><li>openDatabase : 这个方法使用现有数据库或创建新数据库创建数据库对象。</li><li>transaction : 这个方法允许我们根据情况控制事务提交或回滚。</li><li>executeSql : 这个方法用于执行真实的SQL查询。</li></ul><p>openDatabase方法可以打开已经存在的数据库，不存在则创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var db = openDatabase(&apos;mydatabase&apos;, &apos;2.0&apos;, &apos;my db&apos;, 2 * 1024);</span><br></pre></td></tr></table></figure><p>openDatabasek中五个参数分别为：数据库名、版本号、描述、数据库大小、创建回调。创建回调没有也可以创建数据库。</p><p>database.transaction() 函数用来查询，executeSql()用于执行sql语句</p><ul><li><p>例如在mydatabase数据库中创建表t1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var db = openDatabase(&apos; mydatabase &apos;, &apos;1.0&apos;, &apos;Test DB&apos;, 2 * 1024 * 1024);  </span><br><span class="line"> db.transaction(function (tx) &#123;    </span><br><span class="line">    tx.executeSql(&apos;CREATE TABLE IF NOT EXISTS t1 (id unique, log)&apos;);  </span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></li><li><p>插入操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var db = openDatabase(&apos;mydatabase&apos;, &apos;2.0&apos;, &apos;my db&apos;, 2 * 1024);</span><br><span class="line"></span><br><span class="line">   db.transaction(function (tx) &#123; </span><br><span class="line">      tx.executeSql(&apos;CREATE TABLE IF NOT EXISTS t1 (id unique, log)&apos;);  </span><br><span class="line">      tx.executeSql(&apos;INSERT INTO t1 (id, log) VALUES (1, &quot;foobar&quot;)&apos;);  </span><br><span class="line">      tx.executeSql(&apos;INSERT INTO t1 (id, log) VALUES (2, &quot;logmsg&quot;)&apos;);  </span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure></li><li><p>在插入新记录时，我们还可以传递动态值，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var db = openDatabase(&apos; mydatabase &apos;, &apos;2.0&apos;, &apos;my db&apos;, 2 * 1024);  </span><br><span class="line">   db.transaction(function (tx) &#123;    </span><br><span class="line">     tx.executeSql(&apos;CREATE TABLE IF NOT EXISTS t1 (id unique, log)&apos;);  </span><br><span class="line">     tx.executeSql(&apos;INSERT INTO t1 (id,log) VALUES (?, ?&apos;), [e_id, e_log];  //e_id和e_log是外部变量</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure></li><li><p>读操作，如果要读取已经存在的记录，我们使用一个回调捕获结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var db = openDatabase(mydatabase, &apos;2.0&apos;, &apos;my db&apos;, 2*1024);     </span><br><span class="line">  db.transaction(function (tx) &#123; </span><br><span class="line">      tx.executeSql(&apos;CREATE TABLE IF NOT EXISTS t1 (id unique, log)&apos;);  </span><br><span class="line">      tx.executeSql(&apos;INSERT INTO t1 (id, log) VALUES (1, &quot;foobar&quot;)&apos;);  </span><br><span class="line">      tx.executeSql(&apos;INSERT INTO t1 (id, log) VALUES (2, &quot;logmsg&quot;)&apos;);  </span><br><span class="line">   &#125;);  </span><br><span class="line">   db.transaction(function (tx) &#123; </span><br><span class="line">      tx.executeSql(&apos;SELECT * FROM t1, [], function (tx, results) &#123; </span><br><span class="line">      var len = results.rows.length, i;  </span><br><span class="line">      msg = &quot;&lt;p&gt;Found rows: &quot; + len + &quot;&lt;/p&gt;&quot;;  </span><br><span class="line">      document.querySelector(&apos;#status&apos;).innerHTML +=  msg;  </span><br><span class="line">      for (i = 0; i &lt; len; i++)&#123; </span><br><span class="line">         alert(results.rows.item(i).log );  </span><br><span class="line">      &#125; </span><br><span class="line">    &#125;, null);  </span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="indexDB"><a href="#indexDB" class="headerlink" title="indexDB"></a>indexDB</h2><p>IndexedDB 是一个为了能够在客户端存储可观数量的结构化数据，并且在这些数据上使用索引进行高性能检索的 API。虽然 DOM 存储 对于存储少量数据是非常有用的，但是它对大量结构化数据的存储就显得力不从心了。IndexedDB 则提供了这样的一个解决方案。 IndexedDB 分别为同步和异步访问提供了单独的 API 。同步 API 本来是要用于仅供 Web Workers 内部使用，但是还没有被任何浏览器所实现。异步 API 在 Web Workers 内部和外部都可以使用，另外浏览器可能对indexDB有50M大小的限制，一般用户保存大量用户数据并要求数据之间有搜索需要的场景。</p><ul><li>异步API</li></ul><p>异步 API 方法调用完后会立即返回，而不会阻塞调用线程。要异步访问数据库，要调用 window 对象 indexedDB 属性的 open() 方法。该方法返回一个 IDBRequest 对象 (IDBOpenDBRequest)；异步操作通过在 IDBRequest 对象上触发事件来和调用程序进行通信。</p><ul><li>同步API</li></ul><p>规范里面还定义了 API 的同步版本。同步 API 还没有在任何浏览器中得以实现。它原本是要和 webWork 一起使用的。</p><p><a href="http://mxr.mozilla.org/mozilla-central/source/modules/libpref/src/init/all.js" target="_blank" rel="noopener">http://mxr.mozilla.org/mozilla-central/source/modules/libpref/src/init/all.js</a> <a href="http://caniuse.com/#feat=indexeddb" target="_blank" rel="noopener">http://caniuse.com/#feat=indexeddb</a></p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>Cookie（或者Cookies），指一般网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密）。cookie一般通过http请求中在头部一起发送到服务器端。一条cookie记录主要由键、值、域、过期时间、大小组成，一般用户保存用户的认证信息。cookie最大长度和域名个数由不同浏览器决定，具体如下：</p><table><thead><tr><th>浏览器</th><th>支持域名个数</th><th>最大长度</th></tr></thead><tbody><tr><td>IE7以上</td><td>50个</td><td>4095B</td></tr><tr><td>Firefox</td><td>50个</td><td>4097B</td></tr><tr><td>Opera</td><td>30个</td><td>4096B</td></tr><tr><td>Safari/WebKit</td><td>无限制</td><td>4097B</td></tr></tbody></table><p>不同域名之间的cookie信息是独立的，如果需要设置共享可以在服务器端设置cookie的path和domain来实现共享。浏览器端也可以通过document.cookie来获取cookie，并通过js浏览器端也可以方便地读取/设置cookie的值。</p><p><a href="https://github.com/component/cookie/blob/master/index.js" target="_blank" rel="noopener">https://github.com/component/cookie/blob/master/index.js</a></p><h2 id="localstorage"><a href="#localstorage" class="headerlink" title="localstorage"></a>localstorage</h2><p>localStorage是html5的一种新的本地缓存方案，目前用的比较多，一般用来存储ajax返回的数据，加快下次页面打开时的渲染速度。</p><table><thead><tr><th>浏览器 1</th><th>最大长度 2</th></tr></thead><tbody><tr><td>IE7以上</td><td>5M</td></tr><tr><td>Firefox 8以上</td><td>5.24M</td></tr><tr><td>Opera</td><td>2M</td></tr><tr><td>Safari/WebKit</td><td>2.6M</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//localStorage核心API:</span><br><span class="line">localStorage.setItem(key, value)//设置记录</span><br><span class="line">localStorage.getItem(key)//获取记录</span><br><span class="line">localStorage.removeItem(key)//删除该域名下单条记录</span><br><span class="line">localStorage.clear()//删除该域名下所有记录</span><br></pre></td></tr></table></figure><p>值得注意的是，localstorage大小有限制，不适合存放过多的数据，如果数据存放超过最大限制会报错，并移除最先保存的数据。</p><p><a href="https://github.com/machao/localStorage" target="_blank" rel="noopener">https://github.com/machao/localStorage</a></p><h2 id="sessionstorage"><a href="#sessionstorage" class="headerlink" title="sessionstorage"></a>sessionstorage</h2><p> sessionStorage和localstorage类似，但是浏览器关闭则会全部删除，api和localstorage相同，实际项目中使用较少。</p><h2 id="application-cache"><a href="#application-cache" class="headerlink" title="application cache"></a>application cache</h2><p>application cahce是将大部分图片资源、js、css等静态资源放在manifest文件配置中。当页面打开时通过manifest文件来读取本地文件或是请求服务器文件。 离线访问对基于网络的应用而言越来越重要。虽然所有浏览器都有缓存机制，但它们并不可靠，也不一定总能起到预期的作用。HTML5 使用ApplicationCache 接口可以解决由离线带来的部分难题。前提是你需要访问的web页面至少被在线访问过一次。 使用缓存接口可为您的应用带来以下三个优势：</p><ul><li>离线浏览 – 用户可在离线时浏览您的完整网站</li><li>速度 – 缓存资源为本地资源，因此加载速度较快。</li><li>服务器负载更少 – 浏览器只会从发生了更改的服务器下载资源。</li></ul><p>在线的情况下，浏览器发现html头部有manifest属性，它会请求manifest文件，如果是第一次访问app，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过app并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。并在下一次生效。离线的情况下，浏览器就直接使用离线存储的资源。</p><p>一个简单的离线页面主要包含以下几个部分：</p><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">manifest</span>=<span class="string">"clock.manifest"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>AppCache Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"clock.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"clock.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">output</span> <span class="attr">id</span>=<span class="string">"clock"</span>&gt;</span><span class="tag">&lt;/<span class="name">output</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"log"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>clock.manifest</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CACHE MANIFEST</span><br><span class="line">#VERSION 1.0</span><br><span class="line">CACHE:</span><br><span class="line">clock.css</span><br><span class="line">clock.js</span><br></pre></td></tr></table></figure><p>clock.js和clock.css为独立的另外文件。 另外需要注意的是更新缓存。在程序中，你可以通过window.applicationCache 对象来访问浏览器的app cache。你可以查看 status 属性来获取cache的当前状态：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">var appCache = window.applicationCache;</span><br><span class="line">switch (appCache.status) &#123;</span><br><span class="line">  case appCache.UNCACHED: // UNCACHED == 0</span><br><span class="line">    return 'UNCACHED';</span><br><span class="line">    break;</span><br><span class="line">  case appCache.IDLE: // IDLE == 1</span><br><span class="line">    return 'IDLE';</span><br><span class="line">    break;</span><br><span class="line">  case appCache.CHECKING: // CHECKING == 2</span><br><span class="line">    return 'CHECKING';</span><br><span class="line">    break;</span><br><span class="line">  case appCache.DOWNLOADING: // DOWNLOADING == 3</span><br><span class="line">    return 'DOWNLOADING';</span><br><span class="line">    break;</span><br><span class="line">  case appCache.UPDATEREADY:  // UPDATEREADY == 4</span><br><span class="line">    return 'UPDATEREADY';</span><br><span class="line">    break;</span><br><span class="line">  case appCache.OBSOLETE: // OBSOLETE == 5</span><br><span class="line">    return 'OBSOLETE';</span><br><span class="line">    break;</span><br><span class="line">  default:</span><br><span class="line">    return 'UKNOWN CACHE STATUS';</span><br><span class="line">    break;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>为了通过编程更新cache，首先调用 applicationCache.update()。这将会试图更新用户的 cache（要求manifest文件已经改变）。最后，当 applicationCache.status 处于 UPDATEREADY 状态时， 调用applicationCache.swapCache()，旧的cache就会被置换成新的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var appCache = window.applicationCache;</span><br><span class="line">appCache.update(); // Attempt to update the user’s cache.</span><br><span class="line">…</span><br><span class="line">if (appCache.status == window.applicationCache.UPDATEREADY) &#123;</span><br><span class="line">  appCache.swapCache();  // The fetch was successful, swap in the new cache.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是通过更新menifest文件来控制其它文件更新的。</p><h2 id="cacheStorage"><a href="#cacheStorage" class="headerlink" title="cacheStorage"></a>cacheStorage</h2><p>CacheStorage是在ServiceWorker的规范中定义的。CacheStorage 可以保存每个serverWorker申明的cache对象，cacheStorage有open、match、has、delete、keys五个核心方法，可以对cache对象的不同匹配进行不同的响应。</p><p>cacheStorage.has() 如果包含cache对象，则返回一个promise对象。 cacheStorage.open() 打开一个cache对象，则返回一个promise对象。 cacheStorage.delete() 删除cache对象，成功则返回一个promise对象，否则返回false。 cacheStorage.keys() 含有keys中字符串的任意一个，则返回一个promise对象。 cacheStorage.delete() 匹配key中含有该字符串的cache对象，返回一个promise对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">caches.has(&apos;v1&apos;).then(function() &#123;</span><br><span class="line">  caches.open(&apos;v1&apos;).then(function(cache) &#123;</span><br><span class="line">      return cache.addAll(myAssets);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).catch(function() &#123;</span><br><span class="line">  someCacheSetupfunction();</span><br><span class="line">&#125;);;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var response;</span><br><span class="line">var cachedResponse = caches.match(event.request).catch(function() &#123;</span><br><span class="line">  return fetch(event.request);</span><br><span class="line">&#125;).then(function(r) &#123;</span><br><span class="line">  response = r;</span><br><span class="line">  caches.open(&apos;v1&apos;).then(function(cache) &#123;</span><br><span class="line">    cache.put(event.request, response);</span><br><span class="line">  &#125;);  </span><br><span class="line">  return response.clone();</span><br><span class="line">&#125;).catch(function() &#123;</span><br><span class="line">  return caches.match(&apos;/sw-test/gallery/myLittleVader.jpg&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">then.addEventListener(&apos;activate&apos;, function(event) &#123;</span><br><span class="line">  var cacheWhitelist = [&apos;v2&apos;];</span><br><span class="line"></span><br><span class="line">  event.waitUntil(</span><br><span class="line">    caches.keys().then(function(keyList) &#123;</span><br><span class="line">      return Promise.all(keyList.map(function(key) &#123;</span><br><span class="line">        if (cacheWhitelist.indexOf(key) === -1) &#123;</span><br><span class="line">          return caches.delete(keyList[i]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage</a></p><h2 id="flash缓存"><a href="#flash缓存" class="headerlink" title="flash缓存"></a>flash缓存</h2><p>这种方式基本不用，这一方法主要基于flash有读写浏览器端本地目录的功能，同时也可以向js提供调用的api，则页面可以通过js调用flash去读写特定的磁盘目录，达到本地数据缓存的目的。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li><p>Web Storage / Web SQL Database / Indexed Database 的数据都存储在浏览器对应的用户配置文件目录(user profile directory)下，以 Windows 7 为例，Chrome 的数据存储在”C:\Users\your-account-name\AppData\Local\Google\Chrome\User Data\Default\”下，而 Firefox 的数据存储在”C:\Users\your-account-name\AppData\Local\Mozilla\Firefox\Profiles\”目录下。</p></li><li><p>cookie文件存储于documents andsettings\userName\cookie\文件夹下。通常的命名格式为：<a href="mailto:userName@domain.txt" target="_blank" rel="noopener">userName@domain.txt</a>。<br>  较多的缓存机制目前主流浏览器并不兼容，不过可以使用polyfill的方法来处理</p></li></ul><p>浏览器涉及的缓存方式主要包含这些，具体结合自己的业务场景进行选择使用</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手机端页面在项目中遇到的一些问题及解决办法</title>
      <link href="/2018/09/18/%E6%89%8B%E6%9C%BA%E7%AB%AF%E9%A1%B5%E9%9D%A2%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2018/09/18/%E6%89%8B%E6%9C%BA%E7%AB%AF%E9%A1%B5%E9%9D%A2%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>手机端页面在项目中遇到的一些问题及解决办法</p> <a id="more"></a><h2 id="解决页面使用overflow-scroll在iOS上滑动卡顿的问题"><a href="#解决页面使用overflow-scroll在iOS上滑动卡顿的问题" class="headerlink" title="解决页面使用overflow: scroll在iOS上滑动卡顿的问题?"></a>解决页面使用overflow: scroll在iOS上滑动卡顿的问题?</h2><p>首先你可能会给页面的html和body增加了height: 100%, 然后就可能造成IOS上页面滑动的卡顿问题。解决方案是：</p><p>(1) 看是否能把body和html的height: 100%去除掉。</p><p>(2) 在滚动的容器中增加：-webkit-overflow-scrolling: touch或者给body增加：body {overflow-x: hidden}。</p><h2 id="ios页面橡皮弹回效果遮挡页面选项卡？"><a href="#ios页面橡皮弹回效果遮挡页面选项卡？" class="headerlink" title="ios页面橡皮弹回效果遮挡页面选项卡？"></a>ios页面橡皮弹回效果遮挡页面选项卡？</h2><p>(1) 有时body和html的height: 100%去除掉问题可能就没有了。</p><p>(2) 到达临界值的时候在阻止事件默认行为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var startY,endY;</span><br><span class="line">//记录手指触摸的起点坐标</span><br><span class="line">$(&apos;body&apos;).on(&apos;touchstart&apos;,function (e) &#123;</span><br><span class="line">     startY = e.touches[0].pageY;</span><br><span class="line">&#125;);</span><br><span class="line">$(&apos;body&apos;).on(&apos;touchmove&apos;,function (e) &#123;</span><br><span class="line">     endY = e.touches[0].pageY;  //记录手指触摸的移动中的坐标</span><br><span class="line">     //手指下滑，页面到达顶端不能继续下滑</span><br><span class="line">     if(endY&gt;startY&amp;&amp; $(window).scrollTop()&lt;=0)&#123;</span><br><span class="line">         e.preventDefault();</span><br><span class="line">     &#125;</span><br><span class="line">   //手指上滑，页面到达底部能继续上滑</span><br><span class="line">     if(endY&lt;startY&amp;&amp; $(window).scrollTop()+ </span><br><span class="line">         $(window).height()&gt;=$(&apos;body&apos;)[0].scrollHeight)&#123;</span><br><span class="line">         e.preventDefault();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>有时也会碰见弹窗出来后两个层的橡皮筋效果出现问题，我们可以在弹出弹出时给底层页面加上一个类名，类名禁止页面滑动这样下层的橡皮筋效果就会被禁止，就不会影响弹窗层。</p><h2 id="IOS机型margin属性无效问题？"><a href="#IOS机型margin属性无效问题？" class="headerlink" title="IOS机型margin属性无效问题？"></a>IOS机型margin属性无效问题？</h2><ul><li><p>设置html body的高度为百分比时，margin-bottom在safari里失效</p></li><li><p>直接padding代替margin</p></li></ul><h2 id="Ios绑定点击事件不执行？"><a href="#Ios绑定点击事件不执行？" class="headerlink" title="Ios绑定点击事件不执行？"></a>Ios绑定点击事件不执行？</h2><ul><li>添加样式cursor ：pointer。点击后消除背景闪一下的css：-webkit-tap-highlight-color:transparent;</li></ul><h2 id="Ios键盘换行变为搜索？"><a href="#Ios键盘换行变为搜索？" class="headerlink" title="Ios键盘换行变为搜索？"></a>Ios键盘换行变为搜索？</h2><ul><li><p>首先，input 要放在 form里面。</p></li><li><p>这时 “换行” 已经变成 “前往”。</p></li><li><p>如果想变成 “搜索”，input 设置 type=”search”。</p></li></ul><h2 id="Jq对a标签点击事件不生效？"><a href="#Jq对a标签点击事件不生效？" class="headerlink" title="Jq对a标签点击事件不生效？"></a>Jq对a标签点击事件不生效？</h2><p>出现这种情况的原因不明，有的朋友解释：我们平时都是点击的A标签中的文字了。 所以要想用JS模拟点击A标签事件，就得先往A标签中的文字添加能被JS捕获的元素，然后再用JS模拟点击该元素即可。但是我觉得不合理，虽然找不到原因但是解决办法还是有的。</p><p>(1)document.getElementById(“abc “).click();</p><p>(2)$(“#abc “)[0].click();</p><h2 id="有时因为服务器或者别的原因导致页面上的图片没有找到？"><a href="#有时因为服务器或者别的原因导致页面上的图片没有找到？" class="headerlink" title="有时因为服务器或者别的原因导致页面上的图片没有找到？"></a>有时因为服务器或者别的原因导致页面上的图片没有找到？</h2><p>这是我们想需要用一个本地的图片代替没有找的的图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt; </span><br><span class="line">function nofind()&#123; </span><br><span class="line">var img=event.srcElement; </span><br><span class="line">img.src=&quot;images/logoError.png&quot;; </span><br><span class="line">img.onerror=null; 控制不要一直跳动 </span><br><span class="line">&#125; </span><br><span class="line">&lt;/script&gt; </span><br><span class="line">&lt;img src=&quot;images/logo.png&quot; onerror=&quot;nofind();&quot; /&gt;</span><br></pre></td></tr></table></figure><h2 id="transform属性影响position-fixed？"><a href="#transform属性影响position-fixed？" class="headerlink" title="transform属性影响position:fixed？"></a>transform属性影响position:fixed？</h2><ul><li>规范中有规定：如果元素的transform值不为none，则该元素会生成包含块和层叠上下文。CSS Transforms Module Level 1不只在手机上，电脑上也一样。除了fixed元素会受影响之外，z-index（层叠上下文）值也会受影响。绝对定位元素等和包含块有关的属性都会受到影响。当然如果transform元素的display值为inline时又会有所不同。最简单的解决方法就是transform元素内部不能有absolute、fixed元素.</li></ul><h2 id="ios对position-fixed不太友好，有时我们需要加点处理？"><a href="#ios对position-fixed不太友好，有时我们需要加点处理？" class="headerlink" title="ios对position: fixed不太友好，有时我们需要加点处理？"></a>ios对position: fixed不太友好，有时我们需要加点处理？</h2><p>在安卓上面，点击页面底部的输入框，软键盘弹出，页面移动上移。</p><p>而ios上面，点击页面底部输入框，软键盘弹出，输入框看不到了。。。查资料说什么的都有，iscroll,jquery-moblie，absolute，fixe，static都非常复杂，要改很多。。。</p><p>让他弹出时让滚动条在最低部</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var u = navigator.userAgent, app = navigator.appVersion;</span><br><span class="line">var isiOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/); //ios终端</span><br><span class="line">if (isiOS) &#123;</span><br><span class="line">    $(&apos;textarea&apos;).focus(function () &#123;</span><br><span class="line">        window.setTimeout(&apos;scrollBottom()&apos;, 500);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">function scrollBottom() &#123;</span><br><span class="line">    window.scrollTo(0, $(&apos;body&apos;).height());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jq-validate插件验证问题？"><a href="#jq-validate插件验证问题？" class="headerlink" title="jq validate插件验证问题？"></a>jq validate插件验证问题？</h2><p>(1)所以的input必须有name不然会出错</p><h2 id="有时手机会出现断网的情况，我没可能会对断网的情况做一些处理？"><a href="#有时手机会出现断网的情况，我没可能会对断网的情况做一些处理？" class="headerlink" title="有时手机会出现断网的情况，我没可能会对断网的情况做一些处理？"></a>有时手机会出现断网的情况，我没可能会对断网的情况做一些处理？</h2><p>(1)navigator.onLine可判断是否是脱机状态.</p><h2 id="判断对象的长度？"><a href="#判断对象的长度？" class="headerlink" title="判断对象的长度？"></a>判断对象的长度？</h2><p>(1)用Object.keys，Object.keys方法返回的是一个数组，数组里面装的是对象的属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">    &quot;name&quot; : &quot;itxcc&quot;,</span><br><span class="line">    &quot;sex&quot; : &quot;man&quot;,</span><br><span class="line">    &quot;age&quot; : &quot;50&quot;,</span><br><span class="line">    &quot;height&quot; : &quot;180&quot;,</span><br><span class="line">    &quot;phone&quot; : &quot;1xxxxxxxxxx&quot;,</span><br><span class="line">    &quot;email&quot; : &quot;xxxxxxxxx@xxx.com&quot;</span><br><span class="line">&#125;;</span><br><span class="line">var arr = Object.keys(person);</span><br><span class="line">console.log(arr.length);</span><br></pre></td></tr></table></figure><p>(2)Object.getOwnPropertyNames(obj).length</p><h2 id="上一题我们用到了Object-keys与Object-getOwnPropertyNames他们的区别？"><a href="#上一题我们用到了Object-keys与Object-getOwnPropertyNames他们的区别？" class="headerlink" title="上一题我们用到了Object.keys与Object.getOwnPropertyNames他们的区别？"></a>上一题我们用到了Object.keys与Object.getOwnPropertyNames他们的区别？</h2><p>Object.keys定义：返回一个对象可枚举属性的字符串数组；</p><p>Object.getOwnPropertyNames定义：返回一个对象可枚举、不可枚举属性的名称；</p><p>属性的可枚举性、不可枚举性：定义：可枚举属性是指那些内部 “可枚举” 标志设置为 true 的属性，对于通过直接的赋值和属性初始化的属性，该标识值默认为即为 true，对于通过 Object.defineProperty 等定义的属性，该标识值默认为 false。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123; &quot;prop1&quot;: &quot;v1&quot; &#125;;</span><br><span class="line">Object.defineProperty(obj, &quot;prop2&quot;, &#123; value: &quot;v2&quot;, enumerable: false &#125;);</span><br><span class="line">console.log(Object.keys(obj).length);           //output：1</span><br><span class="line">console.log(Object.getOwnPropertyNames(obj).length);    //output：2</span><br><span class="line">console.log(Object.keys(obj));           //output：Array[1] =&gt; [0: &quot;prop1&quot;]</span><br><span class="line">console.log(Object.getOwnPropertyNames(obj));    //output：Array[2] =&gt; [0: &quot;prop1&quot;, 1: &quot;prop2&quot;]</span><br></pre></td></tr></table></figure><p><img src="http://img.itxcc.com/blog/180918/aGCIJFA1LE.png?imageslim" alt="mark"></p><p>综合实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123; &quot;prop1&quot;: &quot;v1&quot; &#125;;</span><br><span class="line">Object.defineProperty(obj, &quot;prop2&quot;, &#123; value: &quot;v2&quot;, enumerable: false&#125;);</span><br><span class="line">console.log(obj.hasOwnProperty(&quot;prop1&quot;)); //output: true</span><br><span class="line">console.log(obj.hasOwnProperty(&quot;prop2&quot;)); //output: true</span><br><span class="line">console.log(obj.propertyIsEnumerable(&quot;prop1&quot;)); //output: true</span><br><span class="line">console.log(obj.propertyIsEnumerable(&quot;prop2&quot;)); //output: false</span><br><span class="line">console.log(&apos;prop1&apos; in obj);    //output: true</span><br><span class="line">console.log(&apos;prop2&apos; in obj);    //output: true</span><br><span class="line">for (var item in obj) &#123;</span><br><span class="line">    console.log(item);</span><br><span class="line">&#125;</span><br><span class="line">//output：prop1</span><br><span class="line">for (var item in Object.getOwnPropertyNames(obj)) &#123;</span><br><span class="line">    console.log(Object.getOwnPropertyNames(obj)[item]);</span><br><span class="line">&#125;</span><br><span class="line">//ouput:[prop1,prop2]</span><br></pre></td></tr></table></figure><h2 id="移动开发不同手机弹出数字键盘问题？"><a href="#移动开发不同手机弹出数字键盘问题？" class="headerlink" title="移动开发不同手机弹出数字键盘问题？"></a>移动开发不同手机弹出数字键盘问题？</h2><p>(1)type=”tel”</p><p>iOS和Android的键盘表现都差不多</p><p>(2)type=”number”</p><p>优点是Android下实现的一个真正的数字键盘</p><p>缺点一：iOS下不是九宫格键盘，输入不方便</p><p>缺点二：旧版Android（包括微信所用的X5内核）在输入框后面会有超级鸡肋的小尾巴，好在Android 4.4.4以后给去掉了。</p><p>不过对于缺点二，我们可以用webkit私有的伪元素给fix掉：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">input[type=number]::-webkit-inner-spin-button,  </span><br><span class="line">input[type=number]::-webkit-outer-spin-button &#123; </span><br><span class="line">        -webkit-appearance: none; </span><br><span class="line">        appearance: none; </span><br><span class="line">        margin: 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)pattern属性<br>pattern用于验证表单输入的内容，通常HTML5的type属性，比如email、tel、number、data类、url等，已经自带了简单的数据格式验证功能了，加上pattern后，前端部分的验证更加简单高效了。</p><p>显而易见，pattern的属性值要用正则表达式。</p><p>实例 简单的数字验证</p><p>数字的验证有两个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;number&quot; pattern=&quot;d&quot;&gt; </span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;number&quot; pattern=&quot;[0-9]*&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="input-number-类型输入非数字字符"><a href="#input-number-类型输入非数字字符" class="headerlink" title="input[number]类型输入非数字字符"></a>input[number]类型输入非数字字符</h2><p>js获取的值是空；比如-12，+123等</p><h2 id="Javascript：history-go-和history-back-的用法与区别？"><a href="#Javascript：history-go-和history-back-的用法与区别？" class="headerlink" title="Javascript：history.go()和history.back()的用法与区别？"></a>Javascript：history.go()和history.back()的用法与区别？</h2><p>简单的说就是：go(-1):返回上一页，原页面表单中的内容会丢失；back():返回上一页，原页表表单中的内容会保留。history.go(-1):后退+刷新history.back():后退</p><p>之所以注意到这个区别，是因为不同的浏览器后退行为也是有区别的，而区别就跟javascript：history.go()和history.back()的区别类似。</p><p>Chrome和ff浏览器后退页面，会刷新后退的页面，若有数据请求也会提交数据申请。类似于history.go(-1);</p><p>而safari（包括桌面版和ipad版）的后退按钮则不会刷新页面，也不会提交数据申请。类似于javascript：history.back();</p><h2 id="Meta基础知识："><a href="#Meta基础知识：" class="headerlink" title="Meta基础知识："></a>Meta基础知识：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot;content=&quot;width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no&quot; /&gt;</span><br><span class="line">// width    设置viewport宽度，为一个正整数，或字符串‘device-width’</span><br><span class="line">// height   设置viewport高度，一般设置了宽度，会自动解析出高度，可以不用设置</span><br><span class="line">// initial-scale    默认缩放比例，为一个数字，可以带小数</span><br><span class="line">// minimum-scale    允许用户最小缩放比例，为一个数字，可以带小数</span><br><span class="line">// maximum-scale    允许用户最大缩放比例，为一个数字，可以带小数</span><br><span class="line">// user-scalable    是否允许手动缩放 </span><br><span class="line">空白页基本meta标签</span><br><span class="line">&lt;!-- 设置缩放 --&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, user-scalable=no, minimal-ui&quot; /&gt;</span><br><span class="line">&lt;!-- 可隐藏地址栏，仅针对IOS的Safari（注：IOS7.0版本以后，safari上已看不到效果） --&gt;</span><br><span class="line">&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot; /&gt;</span><br><span class="line">&lt;!-- 仅针对IOS的Safari顶端状态条的样式（可选default/black/black-translucent ） --&gt;</span><br><span class="line">&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot; /&gt;</span><br><span class="line">&lt;!-- IOS中禁用将数字识别为电话号码/忽略Android平台中对邮箱地址的识别 --&gt;</span><br><span class="line">&lt;meta name=&quot;format-detection&quot;content=&quot;telephone=no, email=no&quot; /&gt;</span><br><span class="line">其他meta标签</span><br><span class="line">&lt;!-- 启用360浏览器的极速模式(webkit) --&gt;</span><br><span class="line">&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;</span><br><span class="line">&lt;!-- 避免IE使用兼容模式 --&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span><br><span class="line">&lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot;&gt;</span><br><span class="line">&lt;!-- 微软的老式浏览器 --&gt;</span><br><span class="line">&lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot;&gt;</span><br><span class="line">&lt;!-- uc强制竖屏 --&gt;</span><br><span class="line">&lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait&quot;&gt;</span><br><span class="line">&lt;!-- QQ强制竖屏 --&gt;</span><br><span class="line">&lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;</span><br><span class="line">&lt;!-- UC强制全屏 --&gt;</span><br><span class="line">&lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;</span><br><span class="line">&lt;!-- QQ强制全屏 --&gt;</span><br><span class="line">&lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot;&gt;</span><br><span class="line">&lt;!-- UC应用模式 --&gt;</span><br><span class="line">&lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;&gt;</span><br><span class="line">&lt;!-- QQ应用模式 --&gt;</span><br><span class="line">&lt;meta name=&quot;x5-page-mode&quot; content=&quot;app&quot;&gt;</span><br><span class="line">&lt;!-- windows phone 点击无高光 --&gt;</span><br><span class="line">&lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="移动端如何定义字体font-family？"><a href="#移动端如何定义字体font-family？" class="headerlink" title="移动端如何定义字体font-family？"></a>移动端如何定义字体font-family？</h2><p>@ ————————————–中文字体的英文名称</p><p>@ 宋体 SimSun</p><p>@ 黑体 SimHei</p><p>@ 微信雅黑 Microsoft Yahei</p><p>@ 微软正黑体 Microsoft JhengHei</p><p>@ 新宋体 NSimSun</p><p>@ 新细明体 MingLiU</p><p>@ 细明体 MingLiU</p><p>@ 标楷体 DFKai-SB</p><p>@ 仿宋 FangSong</p><p>@ 楷体 KaiTi</p><p>@ 仿宋_GB2312 FangSong_GB2312</p><p>@ 楷体_GB2312 KaiTi_GB2312 </p><p>@</p><p>@ 说明：中文字体多数使用宋体、雅黑，英文用Helvetica</p><p>body { font-family: Microsoft Yahei,SimSun,Helvetica; }</p><h2 id="打电话发短信写邮件怎么实现？"><a href="#打电话发短信写邮件怎么实现？" class="headerlink" title="打电话发短信写邮件怎么实现？"></a>打电话发短信写邮件怎么实现？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 一、打电话</span><br><span class="line">&lt;a href=&quot;tel:0755-10086&quot;&gt;打电话给:0755-10086&lt;/a&gt;</span><br><span class="line">//  二、发短信，winphone系统无效</span><br><span class="line">&lt;a href=&quot;sms:10086&quot;&gt;发短信给: 10086&lt;/a&gt;</span><br><span class="line">// 三、写邮件</span><br><span class="line">&lt;a href=&quot;mailto:863139978@qq.com&quot;&gt;点击我发邮件&lt;/a&gt;</span><br><span class="line">//2.收件地址后添加?cc=开头，可添加抄送地址（Android存在兼容问题）</span><br><span class="line">&lt;a href=&quot;mailto:863139978@qq.com?cc=zhangqian0406@yeah.net&quot;&gt;点击我发邮件&lt;/a&gt;</span><br><span class="line">//3.跟着抄送地址后，写上&amp;bcc=,可添加密件抄送地址（Android存在兼容问题）</span><br><span class="line">&lt;a href=&quot;mailto:863139978@qq.com?cc=zhangqian0406@yeah.net&amp;bcc=384900096@qq.com&quot;&gt;点击我发邮件&lt;/a&gt;</span><br><span class="line">//4.包含多个收件人、抄送、密件抄送人，用分号(;)隔开多个邮件人的地址</span><br><span class="line">&lt;a href=&quot;mailto:863139978@qq.com;384900096@qq.com&quot;&gt;点击我发邮件&lt;/a&gt;</span><br><span class="line">//5.包含主题，用?subject=</span><br><span class="line">&lt;a href=&quot;mailto:863139978@qq.com?subject=邮件主题&quot;&gt;点击我发邮件&lt;/a&gt;</span><br><span class="line">//6.包含内容，用?body=;如内容包含文本，使用%0A给文本换行 </span><br><span class="line">&lt;a href=&quot;mailto:863139978@qq.com?body=邮件主题内容%0A腾讯诚信%0A期待您的到来&quot;&gt;点击我发邮件&lt;/a&gt;</span><br><span class="line">//7.内容包含链接，含http(s)://等的文本自动转化为链接</span><br><span class="line">&lt;a href=&quot;mailto:863139978@qq.com?body=http://www.baidu.com&quot;&gt;点击我发邮件&lt;/a&gt;</span><br><span class="line">//8.内容包含图片（PC不支持）</span><br><span class="line">&lt;a href=&quot;mailto:863139978@qq.com?body=&lt;img src=&apos;images/1.jpg&apos; /&gt;&quot;&gt;点击我发邮件&lt;/a&gt;</span><br><span class="line">//9.完整示例</span><br><span class="line">&lt;a href=&quot;mailto:863139978@qq.com;384900096@qq.com?cc=zhangqian0406@yeah.net&amp;bcc=993233461@qq.com&amp;subject=[邮件主题]&amp;body=腾讯诚邀您参与%0A%0Ahttp://www.baidu.com%0A%0A&lt;img src=&apos;images/1.jpg&apos; /&gt;&quot;&gt;点击我发邮件&lt;/a&gt;</span><br></pre></td></tr></table></figure><h2 id="移动端touch事件（区分webkit和winphone）？"><a href="#移动端touch事件（区分webkit和winphone）？" class="headerlink" title="移动端touch事件（区分webkit和winphone）？"></a>移动端touch事件（区分webkit和winphone）？</h2><p>// 以下支持webkit</p><p>touchstart——当手指触碰屏幕时候发生。不管当前有多少只手指</p><p>touchmove——当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用event的preventDefault()可以阻止默认情况的发生：阻止页面滚动</p><p>touchend——当手指离开屏幕时触发</p><p>touchcancel——系统停止跟踪触摸时候会触发。例如在触摸过程中突然页面alert()一个提示框，此时会触发该事件，这个事件比较少用</p><p>//TouchEvent说明：</p><p>touches：屏幕上所有手指的信息</p><p>targetTouches：手指在目标区域的手指信息</p><p>changedTouches：最近一次触发该事件的手指信息</p><p>touchend时，touches与targetTouches信息会被删除，changedTouches保存的最后一次的信息，最好用于计算手指信息</p><p>//参数信息(changedTouches[0])</p><p>clientX、clientY在显示区的坐标</p><p>target：当前元素</p><p>//事件响应顺序</p><p>ontouchstart &gt; ontouchmove &gt; ontouchend &gt; onclick</p><h2 id="点击元素产生背景或边框怎么去掉"><a href="#点击元素产生背景或边框怎么去掉" class="headerlink" title="点击元素产生背景或边框怎么去掉"></a>点击元素产生背景或边框怎么去掉</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//ios用户点击一个链接，会出现一个半透明灰色遮罩, 如果想要禁用，可设置-webkit-tap-highlight-color的alpha值为0去除灰色半透明遮罩；</span><br><span class="line">//android用户点击一个链接，会出现一个边框或者半透明灰色遮罩, 不同生产商定义出来额效果不一样，可设置-webkit-tap-highlight-color的alpha值为0去除部分机器自带的效果；</span><br><span class="line">//winphone系统,点击标签产生的灰色半透明背景，能通过设置&lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;去掉；</span><br><span class="line">//特殊说明：有些机型去除不了，如小米2。对于按钮类还有个办法，不使用a或者input标签，直接用div标签 </span><br><span class="line">a,button,input,textarea &#123; </span><br><span class="line">    -webkit-tap-highlight-color: rgba(0,0,0,0); </span><br><span class="line">    -webkit-user-modify:read-write-plaintext-only; //-webkit-user-modify有个副作用，就是输入法不再能够输入多个字符</span><br><span class="line">&#125;   </span><br><span class="line">// 也可以 </span><br><span class="line">* &#123; -webkit-tap-highlight-color: rgba(0,0,0,0); &#125;</span><br><span class="line">//winphone下</span><br><span class="line">&lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="美化表单元素"><a href="#美化表单元素" class="headerlink" title="美化表单元素"></a>美化表单元素</h2><p>一、使用appearance改变webkit浏览器的默认外观</p><p>input,select { -webkit-appearance:none; appearance: none; }</p><p>二、winphone下，使用伪元素改变表单元素默认外观</p><p>1.禁用select默认箭头，::-ms-expand修改表单控件下拉箭头，设置隐藏并使用背景图片来修饰</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select::-ms-expand &#123; display:none; &#125;</span><br></pre></td></tr></table></figure><p>2.禁用radio和checkbox默认样式，::-ms-check修改表单复选框或单选框默认图标，设置隐藏并使用背景图片来修饰</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input[type=radio]::-ms-check,</span><br><span class="line"></span><br><span class="line">input[type=checkbox]::-ms-check &#123; display:none; &#125;</span><br></pre></td></tr></table></figure><p>3.禁用pc端表单输入框默认清除按钮，::-ms-clear修改清除按钮，设置隐藏并使用背景图片来修饰</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">input[type=text]::-ms-clear,</span><br><span class="line"></span><br><span class="line">input[type=tel]::-ms-clear,</span><br><span class="line"></span><br><span class="line">input[type=number]::-ms-clear &#123; display:none; &#125;</span><br></pre></td></tr></table></figure><h2 id="移动端字体单位font-size选择px还是rem？"><a href="#移动端字体单位font-size选择px还是rem？" class="headerlink" title="移动端字体单位font-size选择px还是rem？"></a>移动端字体单位font-size选择px还是rem？</h2><p>如需适配多种移动设备，建议使用rem。以下为参考值：</p><p>html { font-size: 62.5%; } //10*16 = 62.5%</p><p>设置12px字体 这里注意在rem前要加上对应的px值，解决不支持rem的浏览器的兼容问题，做到优雅降级</p><p>body { font-size:12px; font-size:1.2rem; }</p><h2 id="input标签添加上disable属性在ios端字体颜色不兼容的问题？"><a href="#input标签添加上disable属性在ios端字体颜色不兼容的问题？" class="headerlink" title="input标签添加上disable属性在ios端字体颜色不兼容的问题？"></a>input标签添加上disable属性在ios端字体颜色不兼容的问题？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">input[disabled],input:disabled,input.disabled&#123;</span><br><span class="line">  color: #3e3e3e;  </span><br><span class="line">  -webkit-text-fill-color: #3e3e3e;  </span><br><span class="line">  -webkit-opacity:1;  </span><br><span class="line">  opacity: 1;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IOS-的光标大小问题"><a href="#IOS-的光标大小问题" class="headerlink" title="IOS 的光标大小问题"></a>IOS 的光标大小问题</h2><p>IE：不管该行有没有文字，光标高度与font-size一致。 </p><p>FF：该行有文字时，光标高度与font-size一致。该行无文字时，光标高度与input的height一致。 </p><p>Chrome：该行无文字时，光标高度与line-height一致；该行有文字时，光标高度从input顶部到文字底部(这两种情况都是在有设定line-height的时候)，如果没有line-height，则是与font-size一致。</p><p>IOS中情况和Chrome 相似。</p><p>设置字体大小和行高一致，然后通过 padding 撑开大小</p><p>只给IE浏览器设置 line-height</p><p>-ms-line-height:40px;</p><blockquote><p>转载自segmentfault作者<a href="https://segmentfault.com/a/1190000015178877" target="_blank" rel="noopener">键盘上的眼泪</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那时少年</title>
      <link href="/2018/09/14/%E9%82%A3%E6%97%B6%E5%B0%91%E5%B9%B4/"/>
      <url>/2018/09/14/%E9%82%A3%E6%97%B6%E5%B0%91%E5%B9%B4/</url>
      
        <content type="html"><![CDATA[<p>只记得那时侯她很笨呐。</p><p>她会迷路，一旦离开我1000码的距离就会没有方向感，所以我学会了卡莉斯塔签订契约，她就不会走丢了。</p> <a id="more"></a><p>她操作不好，被女警狙击的时候不会闪现到别人后面，所以我学会伊泽瑞尔的奥术越迁到她的面前，她就不会受伤了。</p><p>她胆子很小，只会玩奶妈型辅助躲在我后面加血，所以我学会格雷福斯的纯爷们多坚持一秒两秒，她就不用害怕了。</p><p>她也会有小脾气，输了游戏之后会沉默着一言不发，所以我学会薇恩后期拯救世界，她就会笑了吧。</p><p>她喜欢璐璐的可爱，我就用克格莫倾听皮克斯的细语；</p><p>她喜欢迦娜的轻柔，我就乘着崔丝塔娜的火箭坐上她的风；</p><p>她喜欢婕拉的蛮横，我就用韦鲁斯的藤蔓缠绕着她的种子生长；</p><p>她最喜欢拉克丝的随缘Q了，我会笑笑用艾希的魔法水晶箭打先手，这样她就不会空Q了。</p><p>她喜欢女警的大长腿。</p><p>她喜欢女枪开大时候的霸气。</p><p>她最喜欢薇恩了，她说她想玩薇恩。 我说好啊，我一个个教你。</p><p>她跑得慢，我就用塔姆吞了她一起跑；</p><p>她老是挨打，我就用布隆在她面前举起盾牌；</p><p>她被人贴脸了，我就用阿里斯塔的牛角疯狂地撞开敌人；</p><p>后来，她的薇恩终于超神了。</p><p>慢慢地，我走了。 她值得一个更好的人去保护她，而那个人不是我。</p><p>现在… 一个人玩AD，也挺好。</p><p>会漏刀了， 会抢人头了， 会卖队友了， 会自己买眼了。</p><p>一个人超神了，一个人超鬼了，都没人在乎了。</p><p>只是会很偶尔，碰到一个很胆小的索拉卡，小心翼翼地在后面加着血，生怕一不小心出了错，很像你。 却不是你。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建</title>
      <link href="/2018/08/31/hexo%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/08/31/hexo%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>hexo搭建学习笔记</p><a id="more"></a><h3 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h3><ul><li>获得个人域名</li><li>GitHub创建个人仓库</li><li>安装Git</li><li>安装Node.js</li><li>安装hexo</li><li>推送网站</li><li>更换主题</li><li>发布文章</li><li>寻找图床</li></ul><h3 id="获取个人域名"><a href="#获取个人域名" class="headerlink" title="获取个人域名"></a>获取个人域名</h3><p>域名是网站的入口，也是网站的第一印象，比如小米的官网的域名是：<a href="https://www.mi.me/" target="_blank" rel="noopener">https://www.mi.me/</a> ，很是巧妙。常见的有com,cn,net,org等后缀，也有小众的xyz,me,io等后缀，根据你自己的喜好，选择不同的后缀，比如我选择就是常见的com后缀。很多小众奇特的后缀在大陆是没办法备案的，网站也就无法上线。然而使用GitHub托管我们的网站，完全不需要备案，因为托管我们的网站内容的服务器在美国，而且在国内备案流程也比较繁杂，时间需要一周左右。</p><p>申请域名的地方有很多，这里推荐阿里云：阿里云-为了无法计算的价值 申请入口：域名注册 购买域名这也是我们整个搭建过程中惟一一个需要花钱的地方。如果你已经有了空闲域名就无需购买，直接使用即可。</p><h3 id="GitHub创建个人仓库"><a href="#GitHub创建个人仓库" class="headerlink" title="GitHub创建个人仓库"></a>GitHub创建个人仓库</h3><p>登录到GitHub,如果没有GitHub帐号，使用你的邮箱注册GitHub帐号：Build software better, together 点击GitHub中的New repository创建新仓库，仓库名应该为：用户名.<a href="http://github.io" target="_blank" rel="noopener">http://github.io</a> 这个用户名使用你的GitHub帐号名称代替，这是固定写法，比如我的仓库名为：<a href="http://www.itxcc.com/" target="_blank" rel="noopener">itxcc.github.io</a></p><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>什么是Git ?简单来说Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到GitHub上。如果想要了解Git的细节，参看廖雪峰老师的Git教程：Git教程 从Git官网下载：Git - Downloading Package 现在的机子基本都是64位的，选择64位的安装包，下载后安装，在命令行里输入git测试是否安装成功，若安装失败，参看其他详细的Git安装教程。安装成功后，将你的Git与GitHub帐号绑定，鼠标右击打开Git Bash</p><p><img src="http://img.itxcc.com/blog/180917/E0jBigDkGl.jpg?imageslim" alt="mark"></p><p>或者在菜单里搜索Git Bash，设置user.name和user.email配置信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><p>生成ssh密钥文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><p>然后直接三个回车即可，默认不需要设置密码<br>然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制</p><p><img src="http://img.itxcc.com/blog/180917/bElEm0b7mK.png?imageslim" alt="mark"></p><p>打开<a href="https://github.com/settings/keys" target="_blank" rel="noopener">GitHub_Settings_keys</a> 页面，新建new SSH Key</p><p><img src="http://img.itxcc.com/blog/180917/bB0lKa2F3D.png?imageslim" alt="mark"></p><p>Title为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。<br>在Git Bash中检测GitHub公钥设置是否成功，输入 ssh <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a> ：</p><p><img src="http://img.itxcc.com/blog/180917/D7heKL55DF.png?imageslim" alt="mark"></p><p>如上则说明成功。这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>Hexo基于Node.js，Node.js下载地址：Download | Node.js 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 node -v :</p><p><img src="http://img.itxcc.com/blog/180917/289GJjcaiG.png?imageslim" alt="mark"></p><p>检测npm是否安装成功，在命令行中输入npm -v :</p><p><img src="http://img.itxcc.com/blog/180917/h88jGFDCk0.png?imageslim" alt="mark"></p><p>到这了，安装Hexo的环境已经全部搭建完成。</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>Hexo就是我们的个人博客网站的框架， 这里需要自己在电脑常里创建一个文件夹，可以命名为Blog，Hexo框架与以后你自己发布的网页都在这个文件夹中。创建好后，用git命令进入该文件夹：</p><p>使用npm命令安装Hexo，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>这个安装时间较长耐心等待，安装完成后，初始化我们的博客，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><p>注意，这里的命令都是作用在刚刚创建的Blog文件夹中。</p><p>为了检测我们的网站雏形，分别按顺序输入以下三条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new test_my_site</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>这些命令在后面作介绍，完成后，打开浏览器输入地址：</p><p>localhost:4000</p><p>可以看到一个初始化hexo博客界面<br>现在来介绍常用的Hexo 命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g #安装Hexo</span><br><span class="line">npm update hexo -g #升级</span><br><span class="line">hexo init #初始化博客</span><br></pre></td></tr></table></figure><p>命令简写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class="line">hexo g == hexo generate #生成</span><br><span class="line">hexo s == hexo server #启动服务预览</span><br><span class="line">hexo d == hexo deploy #部署</span><br><span class="line"></span><br><span class="line">hexo server #Hexo会监视文件变动并自动更新，无须重启服务器</span><br><span class="line">hexo server -s #静态模式</span><br><span class="line">hexo server -p 5000 #更改端口</span><br><span class="line">hexo server -i 192.168.1.1 #自定义 IP</span><br><span class="line">hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</span><br></pre></td></tr></table></figure><p>刚刚的三个命令依次是新建一篇博客文章、生成网页、在本地预览的操作。</p><h3 id="推送网站"><a href="#推送网站" class="headerlink" title="推送网站"></a>推送网站</h3><p>上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。在设置之前，需要解释一个概念，在blog根目录里的_config.yml文件称为站点配置文件，如下图</p><p><img src="http://img.itxcc.com/blog/180917/3iFb7ALk32.png?imageslim" alt="mark"></p><p>进入根目录里的themes文件夹，里面也有个_config.yml文件，这个称为主题配置文件，如下图</p><p><img src="http://img.itxcc.com/blog/180917/KE4607E9EB.png?imageslim" alt="mark"></p><p>下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：<br>deploy:<br>type: git<br>repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git<br>branch: master参考如下：</p><p><img src="http://img.itxcc.com/blog/180917/CGLgIDIClm.png?imageslim" alt="mark"></p><p>保存站点配置文件。</p><p>其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>这时，我们分别输入三条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 <a href="http://xxxx.github.io" target="_blank" rel="noopener">http://xxxx.github.io</a> </p><p>你就会发现你的博客已经上线了，可以在网络上被访问了。</p><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>虽然在Internet上可以访问我们的网站，但是网址是GitHub提供的:<a href="http://xxxx.github.io" target="_blank" rel="noopener">http://xxxx.github.io</a> (知乎排版可能会出现”http://“字样) 而我们想使用我们自己的个性化域名，这就需要绑定我们自己的域名。这里演示的是在阿里云万网的域名绑定，在国内主流的域名代理厂商也就阿里云和腾讯云。登录到阿里云，进入管理控制台的域名列表，找到你的个性化域名，进入解析</p><p><img src="http://img.itxcc.com/blog/180917/7aF0G3haIh.png?imageslim" alt="mark"></p><p>然后添加解析</p><p><img src="http://img.itxcc.com/blog/180917/f8Gm7lCgDE.png?imageslim" alt="mark"></p><p>包括添加三条解析记录，185.199.108.153是GitHub的地址，你也可以ping你的 <a href="http://xxxx.github.io" target="_blank" rel="noopener">http://xxxx.github.io</a> 的ip地址，填入进去。第三个记录类型是CNAME，CNAME的记录值是：你的用户名.<a href="http://github.io" target="_blank" rel="noopener">http://github.io</a> 这里千万别弄错了。第二步，登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名</p><p><img src="http://img.itxcc.com/blog/180917/ilHgjhhK3B.png?imageslim" alt="mark"></p><p>点击save保存。第三步，进入本地博客文件夹 ，进入blog/source目录下，创建一个记事本文件，输入你的域名，对，只要写进你自己的域名即可。如果带有www，那么以后访问的时候必须带有www完整的域名才可以访问，但如果不带有www，以后访问的时候带不带www都可以访问。所以建议，不要带有www。这里我还是写了www(不建议带有www):</p><p><img src="http://img.itxcc.com/blog/180917/FDBKC46l5K.png?imageslim" alt="mark"></p><p>完成这三步，进入blog目录中，按住shift键右击打开命令行，依次输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>这时候打开浏览器在地址栏输入你的个性化域名将会直接进入你自己搭建的网站。</p><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>如果你不喜欢Hexo默认的主题，可以更换不同的主题，主题传送门：Themes 我自己使用的是Next主题，可以在blog目录中的themes文件夹中查看你自己主题是什么。现在把默认主题更改成Next主题，在blog目录中（就是命令行的位置处于blog目录）打开命令行输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>这是将Next主题下载到blog目录的themes主题下的next文件夹中。打开站点的_config.yml配置文件，修改主题为next</p><p><img src="http://img.itxcc.com/blog/180917/01k7G2EFAG.png?imageslim" alt="mark"></p><p>打开主题的_config.yml配置文件，不是站点主题文件，找到Scheme Settings</p><p><img src="http://img.itxcc.com/blog/180917/geBe9EGKcA.png?imageslim" alt="mark"></p><p>next主题有四个样式，我用的是Pisces，你们可以自己试试看，选择你自己喜欢的样式（只需要把行首的#去除，#是注释），选择好后，再次部署网站，hexo g、hexo d，查看效果。选择其他主题，按照上述过程即可实现。</p><h3 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h3><p>我们开始正式发布上线博客文章，在命令行中输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;博客名字&quot;</span><br></pre></td></tr></table></figure><p>我们会发现在blog根目录下的source文件夹中的_post文件夹中多了一个 博客名字.md 文件，使用Markdown编辑器打开，就可以开始你的个人博客之旅了，Markdown常用的样式也就十来种，完全能够满足一般博文的样式要求<br>通过带有预览样式的Markdown编辑器实时预览书写的博文样式，也可以通过命令 hexo s –debug 在本地浏览器的localhost:4000 预览博文效果。写好博文并且样式无误后，通过hexo g、hexo d 生成、部署网页。随后可以在浏览器中输入域名浏览。</p><h3 id="寻找图床"><a href="#寻找图床" class="headerlink" title="寻找图床"></a>寻找图床</h3><p>图床，当博文中有图片时，若是少量图片，可以直接把图片存放在source文件夹中，但这显然不合理的，因为图片会占据大量的存储的空间，加载的时候相对缓慢 ，这时考虑把博文里的图片上传到某一网站，然后获得外部链接，使用Markdown语法，<img src="%E5%A4%96%E9%83%A8%E9%93%BE%E6%8E%A5" alt="图片信息"> 完成图片的插入，这种网站就被成为图床。常见的简易的图床网站有：贴图库图片外链 国内算比较好的图床我认为有两个：新浪微博和 七牛云 ，七牛云的使用方法可以参看其他文章。图床最重要的就是稳定速度快，所以在挑选图床的时候一定要仔细，下图是博文插入图片，使用图床外链的示例：</p><p><img src="http://img.itxcc.com/blog/180917/Kf64eFJ605.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信开放平台--网页扫码登录</title>
      <link href="/2018/08/21/%E5%BE%AE%E4%BF%A1%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0--%E7%BD%91%E9%A1%B5%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95/"/>
      <url>/2018/08/21/%E5%BE%AE%E4%BF%A1%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0--%E7%BD%91%E9%A1%B5%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>微信开放平台–网页扫码登录</p> <a id="more"></a><blockquote><p>做了一个最简单的微信网页扫码登录功能，记录一下整个过程</p></blockquote><h2 id="OAuth2-0"><a href="#OAuth2-0" class="headerlink" title="OAuth2.0"></a>OAuth2.0</h2><ul><li>OAuth（开放授权）是一个开放标准，允许用户让第三方应用访问该用户在某一网站上存储的私密的资源（如照片，视频，联系人列表），而无需将用户名和密码提供给第三方应用</li><li>允许用户提供一个令牌，而不是用户名和密码来访问他们存放在特定服务提供者的数据。每一个令牌授权一个特定的网站（例如，视频编辑网站)在特定的时段（例如，接下来的2小时内）内访问特定的资源（例如仅仅是某一相册中的视频）。这样，OAuth允许用户授权第三方网站访问他们存储在另外的服务提供者上的信息，而不需要分享他们的访问许可或他们数据的所有内容。</li></ul><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>我们这里主要模拟使用OAuth2.0，用户通过扫描我们网页应用的二维码并进行授权登录来获取用户的基本信息的过程。详细的接口相关信息可以在微信开放平台上查看：<a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;lang=zh_CN" target="_blank" rel="noopener">https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;lang=zh_CN</a></p><h2 id="前期准备（获取微信开发者权限）"><a href="#前期准备（获取微信开发者权限）" class="headerlink" title="前期准备（获取微信开发者权限）"></a>前期准备（获取微信开发者权限）</h2><p>　在进行微信OAuth2.在进行微信OAuth2.0授权登录接入之前，在微信开放平台注册开发者帐号，并拥有一个已审核通过的网站应用，并获得相应的AppID和AppSecret，申请微信登录且通过审核后，可开始接入流程。</p><h3 id="注册开发者账号"><a href="#注册开发者账号" class="headerlink" title="注册开发者账号"></a>注册开发者账号</h3><p>可以在 <a href="https://open.weixin.qq.com/" target="_blank" rel="noopener">https://open.weixin.qq.com/</a> 这里申请开发的账号。由于是腾讯的网页，这里可以直接通过 QQ号进行登录。</p><h3 id="提交网站应用审核"><a href="#提交网站应用审核" class="headerlink" title="提交网站应用审核"></a>提交网站应用审核</h3><p>在已经登录的界面中选择“管理中心”——》网站应用——》创建网站应用</p><p><img src="http://img.itxcc.com/blog/180920/41dbDKeJmg.png?imageslim" alt="mark"></p><p>填写过后，还有有一个页面需要填写，提交一份纸质版申请书扫描件（会提供模板，我们下载再来填写后，需盖章，签名），配置回调域名（扫码登录后会跳转的页面）等。</p><p>之后提交审核即可，等微信审核通过，我们即可获得我们需要的网页应用的appid和AppSecret，并配置后回调的域名了（这三样是我们开发所必须的）。</p><h3 id="开发者资质认证"><a href="#开发者资质认证" class="headerlink" title="开发者资质认证"></a>开发者资质认证</h3><p>由于我们这里要使用微信登录的接口，所以我们还需要向微信提出认证，只有认证了才能使用微信那些高级的接口。未认证的如下图所示<br><img src="http://img.itxcc.com/blog/180920/bhGAdmAF42.png?imageslim" alt="mark"></p><p>认证之后是这样子的：</p><p><img src="http://img.itxcc.com/blog/180920/127kG53If7.png?imageslim" alt="mark"></p><p>接下来，我们就可以开始我们的网页微信扫码登录开发了。</p><h3 id="授权流程说明"><a href="#授权流程说明" class="headerlink" title="授权流程说明"></a>授权流程说明</h3><p>微信OAuth2.0授权登录让微信用户使用微信身份安全登录第三方应用或网站，在微信用户授权登录已接入微信OAuth2.0的第三方应用后，第三方可以获取到用户的接口调用凭证（access_token），通过access_token可以进行微信开放平台授权关系接口调用，从而可实现获取微信用户基本开放信息和帮助用户实现基础开放功能等。 </p><p>　　微信OAuth2.0授权登录目前支持authorization_code模式，适用于拥有server端的应用授权。该模式整体流程为：</p><ul><li>第三方发起微信授权登录请求，微信用户允许授权第三方应用后，微信会拉起应用或重定向到第三方网站，并且带上授权临时票据code参数；</li><li>通过code参数加上AppID和AppSecret等，通过API换取access_token；</li><li>通过access_token进行接口调用，获取用户基本数据资源或帮助用户实现基本操作。</li></ul><p>最后这一步可以结合微信开放平台官方文档进行操作。</p><p><a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;lang=zh_CN" target="_blank" rel="noopener">https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;lang=zh_CN</a></p>]]></content>
      
      
      <categories>
          
          <category> 微信开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 微信开发 </tag>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery查找元素</title>
      <link href="/2018/07/06/jq%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0/"/>
      <url>/2018/07/06/jq%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<p>jQuery查找元素</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">jQuery.parent(expr) 找父亲节点，可以传入expr进行过滤，比如$(&quot;span&quot;).parent()或者$(&quot;span&quot;).parent(&quot;.class&quot;)</span><br><span class="line"></span><br><span class="line">jQuery.parents(expr),类似于jQuery.parents(expr),但是是查找所有祖先元素，不限于父元素</span><br><span class="line"></span><br><span class="line">jQuery.children(expr).返回所有子节点，这个方法只会返回直接的孩子节点，不会返回所有的子孙节点</span><br><span class="line"></span><br><span class="line">jQuery.contents(),返回下面的所有内容，包括节点和文本。这个方法和children()的区别就在于，包括空白文本，也会被作为一个jQuery对象返回，children()则只会返回节点</span><br><span class="line"></span><br><span class="line">jQuery.prev()，返回上一个兄弟节点，不是所有的兄弟节点</span><br><span class="line"></span><br><span class="line">jQuery.prevAll()，返回所有之前的兄弟节点</span><br><span class="line"></span><br><span class="line">jQuery.next(),返回下一个兄弟节点，不是所有的兄弟节点</span><br><span class="line"></span><br><span class="line">jQuery.nextAll()，返回所有之后的兄弟节点</span><br><span class="line"></span><br><span class="line">jQuery.siblings(),返回兄弟姐妹节点，不分前后</span><br><span class="line"></span><br><span class="line">jQuery.find(expr),跟jQuery.filter(expr)完全不一样。jQuery.filter()是从初始的jQuery对象集合中筛选出一部分，而jQuery.find()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> jq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>元素居中的三种方法</title>
      <link href="/2018/06/04/%E5%85%83%E7%B4%A0%E5%B1%85%E4%B8%AD%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2018/06/04/%E5%85%83%E7%B4%A0%E5%B1%85%E4%B8%AD%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>元素居中的三种方法</p> <a id="more"></a><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">div.box&#123;</span><br><span class="line"></span><br><span class="line">weight:200px;</span><br><span class="line"></span><br><span class="line">height:400px;</span><br><span class="line"></span><br><span class="line">&lt;!--把元素变成定位元素--&gt;</span><br><span class="line"></span><br><span class="line">position:absolute;</span><br><span class="line"></span><br><span class="line">&lt;!--设置元素的定位位置，距离上、左都为50%--&gt;</span><br><span class="line"></span><br><span class="line">left:50%;</span><br><span class="line"></span><br><span class="line">top:50%;</span><br><span class="line"></span><br><span class="line">&lt;!--设置元素的左外边距、上外边距为宽高的负1/2--&gt;</span><br><span class="line"></span><br><span class="line">margin-left:-100px;</span><br><span class="line"></span><br><span class="line">margin-top:-200px;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*兼容性好;缺点:必须知道元素的宽高</span><br></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">div.box&#123;</span><br><span class="line"></span><br><span class="line">weight:200px;</span><br><span class="line"></span><br><span class="line">height:400px;</span><br><span class="line"></span><br><span class="line">&lt;!--把元素变成定位元素--&gt;</span><br><span class="line"></span><br><span class="line">position:absolute;</span><br><span class="line"></span><br><span class="line">&lt;!--设置元素的定位位置，距离上、左都为50%--&gt;</span><br><span class="line"></span><br><span class="line">left:50%;</span><br><span class="line"></span><br><span class="line">top:50%;</span><br><span class="line"></span><br><span class="line">&lt;!--设置元素的相对于自身的偏移度为负50%(也就是元素自身尺寸的一半)--&gt;</span><br><span class="line"></span><br><span class="line">transform:translate(-50%,-50%);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*这是css3里的样式;缺点:兼容性不好，只支持IE9+的浏览器</span><br></pre></td></tr></table></figure><h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.dialog_container:after &#123;</span><br><span class="line"></span><br><span class="line">display: inline-block;</span><br><span class="line"></span><br><span class="line">content: ”;</span><br><span class="line"></span><br><span class="line">width: 0;</span><br><span class="line"></span><br><span class="line">height: 100%;</span><br><span class="line"></span><br><span class="line">vertical-align: middle;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript--setTimeout与setInterval区别</title>
      <link href="/2018/01/25/Javascript--setTimeout%E4%B8%8EsetInterval%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/01/25/Javascript--setTimeout%E4%B8%8EsetInterval%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>Javascript–setTimeout与setInterval区别</p> <a id="more"></a><h2 id="javascript中settimeout和setinterval的区别是"><a href="#javascript中settimeout和setinterval的区别是" class="headerlink" title="javascript中settimeout和setinterval的区别是"></a>javascript中settimeout和setinterval的区别是</h2><p>settimeout只运行一次，也就是说设定的时间到后就触发运行指定代码，运行完后即结束。如果运行的代码中再次运行同样的settimeout命令，则可循环运行。</p><p>setinterval是循环运行的，即每到设定时间间隔就触发指定代码。这是真正的定时器。setinterval使用简单，而settimeout则比较灵活，可以随时退出循环，而且可以设置为按不固定的时间间隔来运行，比如第一次1秒，第二次2秒，第三次3秒……</p><h3 id="settimeout详解"><a href="#settimeout详解" class="headerlink" title="settimeout详解"></a>settimeout详解</h3><p>var t = settimeout(“javascript 语句”, 时间参数) 注：时间参数单位为毫秒</p><p>示例：var t=settimeout(“alert(’3 seconds!’)”, 3000)</p><p>如果js语句带变量，则必须用+号将变量连接起来，如： var t = settimeout（”document.getelementbyid(“+menuid+”).style.display=’none’”, 3000) cleartimeout详解</p><p>语法：cleartimeout(settimeout的变量名)</p><p>示例：cleartimeout(t) //其中t为前面设置的settimeout的变量</p><p>使用cleartimeout可以随时停止计时。</p><h3 id="setinterval定义和用法"><a href="#setinterval定义和用法" class="headerlink" title="setinterval定义和用法"></a>setinterval定义和用法</h3><p>setinterval() 方法可按照指定的周期（以毫秒计）来调用函数或计算表达式。</p><p>setinterval() 方法会不停地调用函数，直到 clearinterval() 被调用或窗口被关闭。由 setinterval() 返回的 id 值可用作 clearinterval() 方法的参数。</p><p>语法 setinterval(code,millisec[,”lang”])</p><p>参数 描述 code 必需。要调用的函数或要执行的代码串。 millisec 必须。周期性执行或调用 code 之间的时间间隔，以毫秒计。</p><p>返回值 一个可以传递给 window.clearinterval() 从而取消对 code 的周期性执行的值。</p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var int=self.setinterval("clock()", 50)</span><br><span class="line">       function clock()&#123;</span><br><span class="line">           var t=new date()</span><br><span class="line">           document.getelementbyid("clock").value = t</span><br><span class="line">       &#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"int=window.clearinterval(int)"</span>&gt;</span>stop interval<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="深度了解settimeout和setinterval的区别"><a href="#深度了解settimeout和setinterval的区别" class="headerlink" title="深度了解settimeout和setinterval的区别"></a>深度了解settimeout和setinterval的区别</h2><p>settimeout和setinterval这两个函数, 大家肯定都不陌生, 但可能并不是每个用过这两个方法的同学, 都了解其内部的实质。甚至可能会错误的把两个实现定时调用的函数理解成了类似thread一样的东西, 认为会在一个时间片内, 并发的执行调用的函数, 似乎很好很强大, 但其实并不是如此, 实际的情况是javascript都是以单线程的方式运行于浏览器的javascript引擎中的, settimeout和setinterval的作用只是把你要执行的代码在你设定的一个时间点插入js引擎维护的一个代码队列中, 插入代码队列并不意味着你的代码就会立马执行的,理解这一点很重要. 而且settimeout和setinterval还有点不一样。</p><p>__先谈谈setTimeout __</p><p>假设我们给一个button的onclick事件绑定了此方法, 当我们按下按钮后, 肯定先执行block1的内容, 然后运行到setTimeout的地方, setTimeout会告诉浏览器说, “200ms后我会插一段要执行的代码给你的队列中”, 浏览器当然答应了(注意插入代码并不意味着立马执行), setTimeout代码运行后, 紧跟其后的block2代码开始执行, 这里就开始说明问题了, 如果block2的代码执行时间超过200ms, 那结果会是如何? 或许按照你之前的理解, 会理所当然的认为200ms一到, 你的process代码会立马执行…事实是, 在block2执行过程中(执行了200ms后)process代码被插入代码队列, 但一直要等click方法执行结束, 才会执行process代码段, 从代码队列上看process代码是在click后面的, 再加上js以单线程方式执行, 所以应该不难理解. 如果是另一种情况, block2代码执行的时间&lt;200ms, setTimeout在200ms后将process代码插入到代码队列, 而那时执行线程可能已经处于空闲状态了(idle), 那结果就是200ms后, process代码插入队列就立马执行了, 就让你感觉200ms后, 就执行了.</p><p>__再看看setInterval __</p><p>这里可能会存在两个问题:</p><p>1.时间间隔或许会跳过 2.时间间隔可能&lt;定时调用的代码的执行时间</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function click() &#123; </span><br><span class="line">// code block1... </span><br><span class="line">setInterval(function() &#123; </span><br><span class="line">// process ... </span><br><span class="line">&#125;, 200); </span><br><span class="line">// code block2 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和上面一样我们假设通过一个click, 触发了setInterval以实现每隔一个时间段执行process代码</p><p>比如onclick要300ms执行完, block1代码执行完, 在5ms时执行setInterval, 以此为一个时间点, 在205ms时插入process代码, click代码顺利结束, process代码开始执行(相当于图中的timer code), 然而process代码也执行了一个比较长的时间, 超过了接下来一个插入时间点405ms, 这样代码队列后又插入了一份process代码, process继续执行着, 而且超过了605ms这个插入时间点, 下面问题来, 可能你还会认为代码队列后面又会继续插入一份process代码…真实的情况是,由于代码队列中已经有了一份未执行的process代码, 所以605ms这个插入时间点将会被”无情”的跳过, 因为js引擎只允许有一份未执行的process代码, 说到这里不知道您是不是会豁然开朗呢…</p><p>为了这种情况你可以用一种更好的代码形式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(function()&#123;</span><br><span class="line">    //processing </span><br><span class="line">    setTimeout(arguments.callee, interval); </span><br><span class="line">&#125;, interval);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
